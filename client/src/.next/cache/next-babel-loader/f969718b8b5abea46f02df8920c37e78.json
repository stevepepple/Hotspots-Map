{"ast":null,"code":"import * as Constants from './constants.js';\nimport { scaleLinear, scalePow } from 'd3-scale';\nimport chroma from 'chroma-js';\nimport * as turf from '@turf/turf';\nimport geoViewport from '@mapbox/geo-viewport';\nimport * as style_variables from 'vibemap-constants/design-system/build/json/variables.json';\nconst helpers = {\n  // Get HTML Position\n  getPosition: function getPosition(options) {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        resolve(position);\n      });\n    });\n  },\n  getBounds: function getBounds(location, zoom, size) {\n    let bounds = geoViewport.bounds([location.longitude, location.latitude], zoom, [size.width, size.height], 512); //console.log(\"Got bounds for: \", location, zoom, size, bounds)\n\n    return bounds;\n  },\n  getDistance: function getDistance(point_a, point_b) {\n    let distance = turf.distance([point_a[0], point_a[1]], [point_b[0], point_b[1]], {\n      units: 'miles'\n    });\n    return distance;\n  },\n  getRadius: function getRadius(bounds) {\n    //let bounds = geoViewport.bounds([location.longitude, location.latitude], zoom, [window.width, window.height])\n    let diameter = turf.distance([bounds[0], bounds[1]], [bounds[2], bounds[3]], {\n      units: 'miles'\n    });\n    let width = turf.distance([bounds[0], bounds[3]], [bounds[2], bounds[3]], {\n      units: 'miles'\n    });\n    let distance = diameter / 2;\n    return distance;\n  },\n  getArea: function getArea(bounds) {\n    //let bounds = geoViewport.bounds([location.longitude, location.latitude], zoom, [window.width, window.height])\n    let height = turf.distance([bounds[0], bounds[1]], // Southwest\n    [bounds[0], bounds[3]], // Northwest\n    {\n      units: 'miles'\n    });\n    let width = turf.distance([bounds[0], bounds[1]], // Southwest\n    [bounds[2], bounds[1]], // Southeast\n    {\n      units: 'miles'\n    });\n    let area = height * width;\n    return area;\n  },\n\n  getDistanceToPixels(bounds, window) {\n    const left = bounds[0];\n    const bottom = bounds[1];\n    const right = bounds[2]; //const top = bounds[3]\n\n    const options = {\n      unit: 'miles'\n    };\n    const latitudinal_distance = turf.distance([left, bottom], [right, bottom], options); //const longitudinal_distance = turf.distance([left, bottom], [left, top], options)\n\n    let pixel_ratio = latitudinal_distance / window.width;\n    return pixel_ratio;\n  },\n\n  getVibeStyle(vibe) {\n    let vibe_styles = style_variables['default']['color']['vibes'];\n    let dark_gray = style_variables['default']['color']['base']['gray']['1000'];\n    let light_gray = style_variables['default']['color']['base']['gray']['300'];\n    let css = {\n      color: dark_gray,\n      background: light_gray\n    };\n\n    if (vibe in vibe_styles) {\n      let primary = vibe_styles[vibe]['primary'];\n      let luminance = chroma(primary).luminance();\n      let brightness = 1.2;\n      if (luminance < 0.1) brightness += 2;\n      if (luminance < 0.3) brightness += 1;\n      let gradient = 'linear-gradient(45deg, ' + chroma(primary).brighten(brightness).hex() + ' 0%, ' + light_gray + ' 75%)';\n      css['background'] = gradient;\n    }\n\n    return css;\n  },\n\n  zoomToRadius: function zoomToRadius(zoom) {\n    // Scale and interpolate radius to zoom siz\n    let zoom_to_radius_scale = scalePow(1).domain([8, 12, 13, 14, 16, 18]) // Zoom size\n    .range([40, 7, 3, 3.5, 1.5, 0.8]); // Scale of search radius\n\n    let new_zoom = zoom_to_radius_scale(zoom);\n    return new_zoom;\n  },\n  scaleIconSize: function scaleIconSize(score, max) {\n    let scale = scalePow(1).domain([0, max]).range([2, 4]);\n    return scale(score);\n  },\n\n  getCategoryMatch(categories) {\n    const all_categories = Constants.place_categories.map(category => category.key);\n    let matches = [];\n    categories.map(category => {\n      if (all_categories.includes(category)) {\n        matches.push(category);\n      }\n    });\n    return matches;\n  },\n\n  getHeatmap(colors, vibe) {\n    //let colors = color.map((color, i) => choroma(color).alpha(0.2))\n    let heatmap = [];\n    let blue = '#008ae5';\n    let gray = '#B1E2E5';\n    let yellow = '#F8EE32';\n    let pink = '#ED0A87';\n    let teal = '#32BFBF';\n    let white = '#FFFFFF';\n    let light_blue = '#54CAF2';\n    let light_green = '#9DE862';\n    let light_teal = '#7DCAA5';\n    let light_pink = '#E479B0';\n    let light_purple = '#BC94C4';\n    let light_yellow = '#FFFCC5';\n    let light_orange = '#FBCBBD';\n    let orange = '#F09C1F'; //'yellow', 'lightgreen', '008ae5']\n\n    let classic = ['blue', 'teal', 'yellow', 'orange'];\n    let blue_scale = ['gray', 'white', 'yellow', 'blue'];\n    let orange_scale = ['#B1E2E5', 'yellow', 'orange'];\n    let purple_scale = ['#B1E2E5', '#EDE70D', '#F27BA5', '#D76CE3'];\n    let spectral = chroma.scale('Spectral').colors(6).reverse();\n    let green_purple = \"PiYG\";\n    const vibe_to_scale = {\n      'calm': [white, light_green, light_yellow, light_blue],\n      'buzzing': [white, light_pink, light_yellow, orange],\n      'dreamy': [white, light_purple, orange, light_yellow],\n      'oldschool': [blue, yellow, orange],\n      'playful': [white, light_teal, yellow, orange],\n      'solidarity': [white, light_yellow, yellow, orange],\n      'together': [white, light_teal, light_yellow],\n      'wild': green_purple\n    };\n    let scale = [white, light_purple, yellow, orange];\n\n    if (vibe) {\n      scale = vibe_to_scale[vibe];\n    }\n\n    console.log('getHeatmap(colors, vibes): ', colors, vibe, scale);\n\n    if (colors) {\n      let color1 = chroma('#fafa6e');\n      let color2 = chroma('#fafa6e');\n      scale = chroma.scale([colors]);\n    }\n\n    heatmap = chroma.scale(scale).mode('lch') // lab\n    //.domain([0, .1, 0.9, 1])\n    .colors(6);\n    heatmap = heatmap //.reverse()\n    .map((color, i) => {\n      let alpha = i * 0.2;\n      let rgb = chroma(color).alpha(alpha) //.brighten(i * 0.05)\n      .saturate(i * 0.05).css();\n      console.log('heat layer ', i, rgb);\n      return rgb;\n    });\n    /*\r\n    heatmap = chroma.cubehelix()\r\n        .lightness([0.3, 0.8])\r\n        .scale() // convert to chroma.scale\r\n        .correctLightness()\r\n        .colors(6)\r\n      heatmap = chroma.scale('Spectral')\r\n        //.scale() // convert to chroma.scale\r\n        .colors(6)\r\n    */\n\n    return heatmap;\n  },\n\n  normalize: function normalize(val, min, max) {\n    return (val - min) / (max - min) * 10;\n  },\n  // Adapted from https://gist.github.com/James1x0/8443042\n  getTimeOfDay: function getTimeOfDay(moment) {\n    var time_of_day = null; //return g\n\n    if (!moment || !moment.isValid()) {\n      return;\n    } //if we can't find a valid or filled moment, we return.\n\n\n    var split_afternoon = 12; // 24hr time to split the afternoon\n\n    var split_evening = 17; // 24hr time to split the evening\n\n    var currentHour = parseFloat(moment.format(\"HH\"));\n\n    if (currentHour >= split_afternoon && currentHour <= split_evening) {\n      time_of_day = \"afternoon\";\n    } else if (currentHour >= split_evening) {\n      time_of_day = \"evening\";\n    } else {\n      time_of_day = \"morning\";\n    }\n\n    return time_of_day;\n  },\n  // Counts the number of matches between the two lists and return and integer\n  matchLists: function matchLists(listA, listB) {\n    let matches = 0;\n\n    if (listA.length > 0 && listB.length > 0) {\n      matches = listA.filter(word => {\n        return listB.includes(word);\n      }).length;\n    }\n\n    return matches;\n  },\n  rankVibes: function rankVibes(listA, listB) {\n    let rankings = [];\n    rankings = listA.map(word => {\n      let score = 0;\n\n      if (listB.includes(word)) {\n        score = listB.length - listB.indexOf(word);\n      }\n\n      return score;\n    });\n    const average = rankings.reduce((a, b) => a + b, 0) / rankings.length;\n    return average;\n  },\n  sortLocations: function sortLocations(locations, currentLocation) {\n    let current = turf.point([currentLocation.longitude, currentLocation.latitude]); // Sort the list of places based on closness to the users\n\n    let sorted_locations = locations.sort((a, b) => {\n      let point_a = turf.point(a.centerpoint);\n      let point_b = turf.point(b.centerpoint);\n      a.distance = turf.distance(current, point_a);\n      b.distance = turf.distance(current, point_b);\n\n      if (a.distance > b.distance) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n    return sorted_locations;\n  },\n  findPlaceCategoriess: function findPlaceCategoriess(categories) {\n    let combined = [];\n    Constants.all_categories.map(function (category) {\n      let isMatch = function isMatch(name) {\n        var found = categories.indexOf(name);\n\n        if (found > -1) {\n          return true;\n        }\n      }; // Matches the search?\n\n\n      let top_match = isMatch(category.name);\n\n      if (top_match) {\n        combined.push(category.name);\n      }\n\n      if (category.hasOwnProperty('categories')) {\n        category.categories.map(function (sub_category) {\n          let child_match = isMatch(sub_category.name);\n\n          if (top_match || child_match) {\n            combined.push(sub_category.name);\n          }\n        });\n      }\n    });\n    return combined;\n  },\n  scaleMarker: function scaleMarker(score, min, max, zoom) {\n    // TODO: Is this max right? \n    if (!min) {\n      min = 0;\n    }\n\n    if (!max) {\n      max = 100;\n    } // Scale min and max marker size to zoom level\n\n\n    let marker_scale = scalePow(1).domain([8, 20]) // Zoom size\n    .range([10, 30]); // Scale of marker size\n\n    let base_marker = marker_scale(zoom);\n    let max_marker = base_marker * 3;\n    let scale = scalePow(1).domain([0, max]).range([base_marker, max_marker]);\n    let scaled_size = Math.round(scale(score));\n    return scaled_size;\n  },\n  scaleDensityBonus: function scaleDensityBonus(relative_density) {\n    let inverted_scale = scalePow(1).domain([0, 1]).range([Constants.HEATMAP_INTENSITY * 2, Constants.HEATMAP_INTENSITY]);\n    return inverted_scale(relative_density);\n  },\n  scaleDensityArea: function scaleDensityArea(density, area) {\n    let density_scale = scalePow(2).domain([1, 600, 10000]).range([0, 0.6, 1]);\n    let relative_density = density_scale(density);\n    return relative_density;\n  },\n  scaleDensity: function scaleDensity(zoom, density) {\n    // Scale min and max marker size to zoom level\n    // Could also be by area \n    // From sampling our cities\n    // zoom level 10: min = 0; max = 16\n    // zoom level 12: min = 0; max = 173\n    // zoom level 14: min = 0; max = 800\n    // zoom level 16: min = 0; max = 6870\n    let max_density = scalePow(1).domain([8, 10, 12, 14, 16]) // Zoom size\n    .range([10, 20, 80, 800, 8000]); // Scale of marker size\n    // TODO: shoudl this be by area not zoom? \n\n    let max_at_zoom = max_density(zoom);\n    let density_scale = scalePow(1).domain([0, max_at_zoom]).range([0, 1]);\n    let relative_density = density_scale(density);\n    return relative_density;\n  },\n  scaleSelectedMarker: function scaleSelectedMarker(zoom) {\n    // TODO: Is this max right?         \n    // Scale em size of svg marker to zoom level\n    let scale = scalePow(1).domain([8, 12, 20]) // Zoom size\n    .range([0.1, 2, 5]); // Scale of marker size\n\n    let scaled_size = Math.round(scale(zoom));\n    return scaled_size;\n  },\n  getMax: function getMax(items, attribute) {\n    let max = 0;\n    items.forEach(item => {\n      let value = item['properties'][attribute];\n\n      if (value > max) {\n        max = value;\n      }\n    });\n    return max;\n  },\n  getMin: function getMin(items, attribute) {\n    let min = 100;\n    items.forEach(item => {\n      let value = item['properties'][attribute];\n\n      if (value < min) {\n        min = value;\n      }\n    });\n    return min;\n  },\n\n  /* global setTimeout, clearTimeout */\n\n  /* eslint-disable consistent-this, func-names */\n  debounce: function debounce(func, delay) {\n    let _this;\n\n    let _arguments;\n\n    let timeout;\n\n    const executeNow = () => {\n      timeout = null;\n      return func.apply(_this, _arguments);\n    };\n\n    console.log(_this, _arguments);\n    return function () {\n      _this = this;\n      _arguments = arguments;\n\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n\n      timeout = setTimeout(executeNow, delay);\n    };\n  },\n  itemExists: function itemExists(name) {\n    return new Promise((resolve, reject) => {\n      Event.find({\n        name: name\n      }).limit(1).then(result => {\n        if (result.length > 0) {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  },\n  fireEvent: function fireEvent(id, event) {\n    if (document.getElementById(id) !== null) {\n      let new_event = new Event(event, {\n        bubbles: true,\n        cancelable: false\n      });\n      document.getElementById(id).dispatchEvent(new_event);\n\n      if (document.getElementById(id).fireEvent) {\n        document.getElementById(id).fireEvent(event);\n      } else {\n        /*\r\n        var evObj = document.createEvent('Events');\r\n        evObj.initEvent(event, true, false);\r\n        */\n        let new_event = new Event(event, {\n          bubbles: true,\n          cancelable: false\n        });\n        document.getElementById(id).dispatchEvent(new_event);\n      }\n    }\n  },\n  toTitleCase: function toTitleCase(str) {\n    if (typeof str == \"string\") {\n      str = str.toLowerCase().split(' ');\n\n      for (var i = 0; i < str.length; i++) {\n        str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n      }\n\n      return str.join(' ');\n    } else {\n      return str;\n    }\n  }\n};\nexport default helpers;","map":{"version":3,"sources":["C:/Users/12604/Dropbox (Personal)/Projects/Hotspot App/App/client/src/helpers.js"],"names":["Constants","scaleLinear","scalePow","chroma","turf","geoViewport","style_variables","helpers","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","getBounds","location","zoom","size","bounds","longitude","latitude","width","height","getDistance","point_a","point_b","distance","units","getRadius","diameter","getArea","area","getDistanceToPixels","window","left","bottom","right","unit","latitudinal_distance","pixel_ratio","getVibeStyle","vibe","vibe_styles","dark_gray","light_gray","css","color","background","primary","luminance","brightness","gradient","brighten","hex","zoomToRadius","zoom_to_radius_scale","domain","range","new_zoom","scaleIconSize","score","max","scale","getCategoryMatch","categories","all_categories","place_categories","map","category","key","matches","includes","push","getHeatmap","colors","heatmap","blue","gray","yellow","pink","teal","white","light_blue","light_green","light_teal","light_pink","light_purple","light_yellow","light_orange","orange","classic","blue_scale","orange_scale","purple_scale","spectral","reverse","green_purple","vibe_to_scale","console","log","color1","color2","mode","i","alpha","rgb","saturate","normalize","val","min","getTimeOfDay","moment","time_of_day","isValid","split_afternoon","split_evening","currentHour","parseFloat","format","matchLists","listA","listB","length","filter","word","rankVibes","rankings","indexOf","average","reduce","a","b","sortLocations","locations","currentLocation","current","point","sorted_locations","sort","centerpoint","findPlaceCategoriess","combined","isMatch","name","found","top_match","hasOwnProperty","sub_category","child_match","scaleMarker","marker_scale","base_marker","max_marker","scaled_size","Math","round","scaleDensityBonus","relative_density","inverted_scale","HEATMAP_INTENSITY","scaleDensityArea","density","density_scale","scaleDensity","max_density","max_at_zoom","scaleSelectedMarker","getMax","items","attribute","forEach","item","value","getMin","debounce","func","delay","_this","_arguments","timeout","executeNow","apply","arguments","clearTimeout","setTimeout","itemExists","Event","find","limit","then","result","fireEvent","id","event","document","getElementById","new_event","bubbles","cancelable","dispatchEvent","toTitleCase","str","toLowerCase","split","charAt","toUpperCase","slice","join"],"mappings":"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","sourcesContent":["import * as Constants from './constants.js'\r\n\r\nimport { scaleLinear, scalePow } from 'd3-scale'\r\n\r\nimport chroma from 'chroma-js'\r\nimport * as turf from '@turf/turf'\r\nimport geoViewport from '@mapbox/geo-viewport'\r\n\r\nimport * as style_variables from 'vibemap-constants/design-system/build/json/variables.json';\r\n\r\nconst helpers = {\r\n\r\n    // Get HTML Position\r\n    getPosition: function(options) {\r\n        return new Promise(function (resolve, reject) {\r\n\r\n            navigator.geolocation.getCurrentPosition(function (position) {\r\n                resolve(position);\r\n            });\r\n\r\n        })\r\n    },\r\n\r\n    getBounds: function(location, zoom, size) {\r\n        let bounds = geoViewport.bounds([location.longitude, location.latitude], zoom, [size.width, size.height], 512)\r\n        //console.log(\"Got bounds for: \", location, zoom, size, bounds)\r\n        return bounds\r\n    },\r\n\r\n    getDistance: function (point_a, point_b) {\r\n        let distance = turf.distance(\r\n            [point_a[0], point_a[1]],\r\n            [point_b[0], point_b[1]],\r\n            { units: 'miles' }\r\n        )\r\n\r\n        return distance\r\n    },              \r\n\r\n\r\n    getRadius: function (bounds) {        \r\n        //let bounds = geoViewport.bounds([location.longitude, location.latitude], zoom, [window.width, window.height])\r\n        let diameter = turf.distance(\r\n            [bounds[0], bounds[1]],\r\n            [bounds[2], bounds[3]],\r\n            { units: 'miles'}\r\n        )\r\n\r\n        let width = turf.distance(\r\n            [bounds[0], bounds[3]],\r\n            [bounds[2], bounds[3]],\r\n            { units: 'miles' }\r\n        )\r\n\r\n        let distance = diameter / 2\r\n\r\n        return distance\r\n    },\r\n\r\n    getArea: function (bounds) {\r\n        \r\n        //let bounds = geoViewport.bounds([location.longitude, location.latitude], zoom, [window.width, window.height])\r\n        let height = turf.distance(\r\n            [bounds[0], bounds[1]], // Southwest\r\n            [bounds[0], bounds[3]], // Northwest\r\n            { units: 'miles' }\r\n        )\r\n\r\n        let width = turf.distance(\r\n            [bounds[0], bounds[1]], // Southwest\r\n            [bounds[2], bounds[1]], // Southeast\r\n            { units: 'miles' }\r\n        )\r\n  \r\n        let area = height * width\r\n\r\n        return area\r\n    },\r\n\r\n    getDistanceToPixels(bounds, window) {\r\n        const left = bounds[0]\r\n        const bottom = bounds[1]\r\n        const right = bounds[2]\r\n        //const top = bounds[3]\r\n\r\n        const options = { unit: 'miles' }\r\n        \r\n        const latitudinal_distance = turf.distance([left, bottom],[right, bottom], options)\r\n        //const longitudinal_distance = turf.distance([left, bottom], [left, top], options)\r\n\r\n        let pixel_ratio = latitudinal_distance / window.width\r\n\r\n        return pixel_ratio\r\n\r\n    },\r\n\r\n    getVibeStyle(vibe) {\r\n        let vibe_styles = style_variables['default']['color']['vibes']\r\n\r\n        let dark_gray = style_variables['default']['color']['base']['gray']['1000']\r\n        let light_gray = style_variables['default']['color']['base']['gray']['300']\r\n\r\n        let css = { color: dark_gray, background: light_gray }\r\n\r\n        if (vibe in vibe_styles) {\r\n            let primary = vibe_styles[vibe]['primary']\r\n\r\n            let luminance = chroma(primary).luminance()\r\n            let brightness = 1.2\r\n            if (luminance < 0.1) brightness += 2\r\n            if (luminance < 0.3) brightness += 1\r\n\r\n            let gradient = 'linear-gradient(45deg, ' + chroma(primary).brighten(brightness).hex() + ' 0%, ' + light_gray + ' 75%)'\r\n\r\n            css['background'] = gradient\r\n\r\n        }\r\n\r\n        return css\r\n    },\r\n\r\n    zoomToRadius : function(zoom) {\r\n        \r\n        // Scale and interpolate radius to zoom siz\r\n        let zoom_to_radius_scale = scalePow(1)\r\n          .domain([8,  12, 13, 14, 16, 18]) // Zoom size\r\n          .range([ 40, 7,  3,  3.5, 1.5,  0.8]) // Scale of search radius\r\n\r\n        let new_zoom = zoom_to_radius_scale(zoom)\r\n        \r\n        return new_zoom\r\n    },\r\n\r\n    scaleIconSize: function(score, max) {\r\n        let scale = scalePow(1)\r\n            .domain([0, max])\r\n            .range([2, 4])\r\n        \r\n        return scale(score)\r\n    },\r\n\r\n    getCategoryMatch(categories) {\r\n        const all_categories = Constants.place_categories.map(category => category.key)\r\n        let matches = []\r\n        categories.map(category => {\r\n            if (all_categories.includes(category)) {\r\n                matches.push(category)\r\n            } \r\n        })\r\n\r\n        return matches\r\n    },\r\n\r\n    getHeatmap(colors, vibe) {\r\n        \r\n        //let colors = color.map((color, i) => choroma(color).alpha(0.2))\r\n        let heatmap = []\r\n        \r\n        let blue = '#008ae5'\r\n        let gray = '#B1E2E5'\r\n        let yellow = '#F8EE32'\r\n        let pink = '#ED0A87'\r\n        let teal = '#32BFBF'\r\n        let white = '#FFFFFF'\r\n        \r\n        let light_blue = '#54CAF2'\r\n        let light_green = '#9DE862'\r\n        let light_teal = '#7DCAA5'     \r\n        let light_pink = '#E479B0'\r\n        let light_purple = '#BC94C4'\r\n        let light_yellow = '#FFFCC5'\r\n        let light_orange = '#FBCBBD'\r\n        let orange = '#F09C1F'\r\n    \r\n        //'yellow', 'lightgreen', '008ae5']\r\n        let classic = ['blue', 'teal', 'yellow', 'orange']\r\n        let blue_scale = ['gray', 'white', 'yellow', 'blue']\r\n        let orange_scale = ['#B1E2E5',  'yellow', 'orange']\r\n        let purple_scale = ['#B1E2E5', '#EDE70D', '#F27BA5', '#D76CE3']\r\n        \r\n        let spectral = chroma.scale('Spectral').colors(6).reverse()\r\n\r\n        let green_purple = \"PiYG\"\r\n        \r\n        const vibe_to_scale = {\r\n            'calm': [white, light_green, light_yellow, light_blue],\r\n            'buzzing': [white, light_pink, light_yellow, orange],\r\n            'dreamy': [white, light_purple, orange, light_yellow],\r\n            'oldschool': [blue, yellow,  orange],\r\n            'playful': [white, light_teal, yellow, orange],\r\n            'solidarity': [white, light_yellow, yellow, orange],\r\n            'together': [white, light_teal, light_yellow],\r\n            'wild': green_purple\r\n        }\r\n\r\n        let scale = [white, light_purple, yellow, orange]\r\n\r\n        if (vibe) {\r\n            scale = vibe_to_scale[vibe]            \r\n        }\r\n\r\n        console.log('getHeatmap(colors, vibes): ', colors, vibe, scale)\r\n\r\n        if (colors) {            \r\n            let color1 = chroma('#fafa6e')\r\n            let color2 = chroma('#fafa6e')\r\n            scale = chroma.scale([colors])\r\n        }\r\n\r\n        heatmap = chroma.scale(scale)\r\n            .mode('lch') // lab\r\n            //.domain([0, .1, 0.9, 1])\r\n            .colors(6)\r\n\r\n        heatmap = heatmap\r\n            //.reverse()\r\n            .map((color, i) => {\r\n                let alpha = i * 0.2\r\n                let rgb = chroma(color)\r\n                    .alpha(alpha)\r\n                    //.brighten(i * 0.05)\r\n                    .saturate(i * 0.05)\r\n                    .css()\r\n                console.log('heat layer ', i, rgb)\r\n                return rgb\r\n            })\r\n\r\n        /*\r\n        heatmap = chroma.cubehelix()\r\n            .lightness([0.3, 0.8])\r\n            .scale() // convert to chroma.scale\r\n            .correctLightness()\r\n            .colors(6)\r\n\r\n        heatmap = chroma.scale('Spectral')\r\n            //.scale() // convert to chroma.scale\r\n            .colors(6)\r\n        */\r\n\r\n        return heatmap\r\n    },\r\n\r\n    normalize : function(val, min, max) {         \r\n        return (val - min) / (max - min) * 10\r\n    },\r\n\r\n    // Adapted from https://gist.github.com/James1x0/8443042\r\n    getTimeOfDay : function(moment) {\r\n\t    var time_of_day = null; //return g\r\n\t\r\n\t    if(!moment || !moment.isValid()) { return; } //if we can't find a valid or filled moment, we return.\r\n\t\r\n\t    var split_afternoon = 12 // 24hr time to split the afternoon\r\n\t    var split_evening = 17 // 24hr time to split the evening\r\n\t    var currentHour = parseFloat(moment.format(\"HH\"));\r\n\t\r\n        if(currentHour >= split_afternoon && currentHour <= split_evening) {\r\n            time_of_day = \"afternoon\";\r\n        } else if(currentHour >= split_evening) {\r\n            time_of_day = \"evening\";\r\n        } else {\r\n            time_of_day = \"morning\";\r\n        }\r\n        \r\n        return time_of_day;\r\n    },\r\n\r\n    // Counts the number of matches between the two lists and return and integer\r\n    matchLists: function(listA, listB ) {\r\n        let matches = 0;\r\n        \r\n        if (listA.length > 0 && listB.length > 0) {\r\n            matches = listA.filter((word) => { return listB.includes(word) }).length\r\n        }\r\n\r\n        return matches;\r\n    },\r\n\r\n    rankVibes: function(listA, listB) {\r\n        let rankings = []\r\n\r\n        rankings = listA.map((word) => {\r\n            let score = 0\r\n            \r\n            if (listB.includes(word)) {\r\n                score = listB.length - listB.indexOf(word)\r\n            }\r\n            \r\n            return score\r\n        })\r\n\r\n        const average = rankings.reduce((a, b) => a + b, 0) / rankings.length\r\n\r\n        return average\r\n    },\r\n\r\n    sortLocations: function(locations, currentLocation) {\r\n\r\n        let current = turf.point([currentLocation.longitude, currentLocation.latitude])\r\n        // Sort the list of places based on closness to the users\r\n        let sorted_locations = locations.sort((a, b) => {\r\n            let point_a = turf.point(a.centerpoint)\r\n            let point_b = turf.point(b.centerpoint)\r\n            a.distance = turf.distance(current, point_a)\r\n            b.distance = turf.distance(current, point_b)\r\n            \r\n            if (a.distance > b.distance) {\r\n                return 1\r\n            } else {\r\n                return -1\r\n            }\r\n        \r\n        })\r\n\r\n        return sorted_locations\r\n    },\r\n\r\n    findPlaceCategoriess: function(categories) {\r\n        \r\n        let combined = []\r\n        Constants.all_categories.map(function(category){\r\n\r\n            let isMatch = function(name) {\r\n                var found = categories.indexOf(name)\r\n                if (found > -1) {                    \r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // Matches the search?\r\n            let top_match = isMatch(category.name)\r\n            if (top_match){ combined.push(category.name) }\r\n\r\n            if (category.hasOwnProperty('categories')) {\r\n                category.categories.map(function(sub_category){\r\n                    \r\n                    let child_match = isMatch(sub_category.name)\r\n\r\n                    if (top_match || child_match ) {\r\n                        combined.push(sub_category.name)\r\n                    }                \r\n                })\r\n            }\r\n        })\r\n\r\n        return combined;\r\n    },\r\n\r\n    scaleMarker: function(score, min, max, zoom) {\r\n        // TODO: Is this max right? \r\n        if (!min) { min = 0 }\r\n        if (!max) { max = 100 }\r\n\r\n        // Scale min and max marker size to zoom level\r\n        let marker_scale = scalePow(1)\r\n            .domain([8, 20]) // Zoom size\r\n            .range([10, 30]) // Scale of marker size\r\n        \r\n        let base_marker = marker_scale(zoom)\r\n        let max_marker = base_marker * 3\r\n\r\n        let scale = scalePow(1)\r\n            .domain([0, max])\r\n            .range([base_marker, max_marker])\r\n                \r\n        let scaled_size = Math.round(scale(score))        \r\n\r\n        return scaled_size\r\n    },\r\n\r\n    scaleDensityBonus: function(relative_density) {\r\n        let inverted_scale = scalePow(1)\r\n            .domain([0, 1])\r\n            .range([Constants.HEATMAP_INTENSITY * 2, Constants.HEATMAP_INTENSITY])\r\n\r\n        return inverted_scale(relative_density)\r\n\r\n    },\r\n\r\n    scaleDensityArea: function(density, area) {\r\n        let density_scale = scalePow(2)\r\n            .domain([1, 600, 10000])\r\n            .range([0, 0.6, 1])\r\n\r\n        let relative_density = density_scale(density)\r\n\r\n        return relative_density\r\n    },\r\n\r\n    scaleDensity: function (zoom, density) {        \r\n\r\n        // Scale min and max marker size to zoom level\r\n        // Could also be by area \r\n        // From sampling our cities\r\n        // zoom level 10: min = 0; max = 16\r\n        // zoom level 12: min = 0; max = 173\r\n        // zoom level 14: min = 0; max = 800\r\n        // zoom level 16: min = 0; max = 6870\r\n\r\n        let max_density = scalePow(1)\r\n            .domain([8, 10, 12, 14, 16]) // Zoom size\r\n            .range([10, 20, 80, 800, 8000]) // Scale of marker size\r\n\r\n        // TODO: shoudl this be by area not zoom? \r\n        let max_at_zoom = max_density(zoom) \r\n        \r\n        let density_scale = scalePow(1)\r\n            .domain([0, max_at_zoom])\r\n            .range([0, 1])\r\n        \r\n        let relative_density = density_scale(density)\r\n        \r\n        return relative_density\r\n    },\r\n    \r\n    scaleSelectedMarker: function (zoom) {\r\n        // TODO: Is this max right?         \r\n\r\n        // Scale em size of svg marker to zoom level\r\n        let scale = scalePow(1)\r\n            .domain([8, 12, 20]) // Zoom size\r\n            .range([0.1, 2, 5]) // Scale of marker size\r\n    \r\n        let scaled_size = Math.round(scale(zoom))\r\n\r\n        return scaled_size\r\n    },\r\n\r\n\r\n    getMax: function(items, attribute) {\r\n        let max = 0;\r\n        items.forEach(item => {\r\n            let value = item['properties'][attribute]\r\n            if (value > max) { \r\n                max = value \r\n            }\r\n        })\r\n\r\n        return max\r\n    },\r\n\r\n    getMin: function (items, attribute) {\r\n        let min = 100\r\n        items.forEach(item => {\r\n            let value = item['properties'][attribute]\r\n            if (value < min) {\r\n                min = value\r\n            }\r\n        })\r\n\r\n        return min\r\n    },\r\n\r\n    /* global setTimeout, clearTimeout */\r\n    /* eslint-disable consistent-this, func-names */\r\n    debounce: function(func, delay) {\r\n        let _this;\r\n        let _arguments;\r\n        let timeout;\r\n\r\n\r\n        const executeNow = () => {\r\n            timeout = null;\r\n            return func.apply(_this, _arguments);\r\n\r\n        };\r\n\r\n        console.log(_this, _arguments)\r\n\r\n\r\n        return function () {\r\n            _this = this;\r\n            _arguments = arguments;\r\n\r\n            if (timeout) {\r\n                clearTimeout(timeout);\r\n            }\r\n            timeout = setTimeout(executeNow, delay);\r\n        };\r\n    },\r\n\r\n    itemExists: function (name) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            Event.find({ name: name }).limit(1)\r\n                .then((result) => {\r\n                    if (result.length > 0) {\r\n                        resolve(true);\r\n                    } else {\r\n                        resolve(false)\r\n                    }\r\n                })\r\n        })\r\n\r\n    },\r\n\r\n    fireEvent: function(id, event) {\r\n        \r\n        if(document.getElementById(id) !== null) {\r\n            let new_event = new Event(event, { bubbles: true, cancelable: false });\r\n\r\n            document.getElementById(id).dispatchEvent(new_event);\r\n\r\n            if (document.getElementById(id).fireEvent) {\r\n\r\n                \r\n                document.getElementById(id).fireEvent(event);\r\n            } else {\r\n                \r\n                /*\r\n                var evObj = document.createEvent('Events');\r\n                evObj.initEvent(event, true, false);\r\n                */\r\n                let new_event = new Event(event, { bubbles: true, cancelable: false });\r\n                \r\n                document.getElementById(id).dispatchEvent(new_event);\r\n            }\r\n        }\r\n    },\r\n\r\n    toTitleCase: function(str) {\r\n        if (typeof(str) == \"string\") {\r\n            str = str.toLowerCase().split(' ');\r\n            for (var i = 0; i < str.length; i++) {\r\n                str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\r\n            }\r\n            return str.join(' ');\r\n        } else {\r\n            return str\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default helpers;"]},"metadata":{},"sourceType":"module"}